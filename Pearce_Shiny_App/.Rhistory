my_char <- c("Hi","My","Name")
print(my_char)
my_char <- c("Hi","My","Name".)
shiny::runApp('C:/Users/djntr/R_Shiny_App_Pearce/Pearce_Shiny_App')
runApp('C:/Users/djntr/R_Shiny_App_Pearce/Pearce_Shiny_App')
runApp('C:/Users/djntr/R_Shiny_App_Pearce/Pearce_Shiny_App')
shiny::runApp('C:/Users/djntr/R_Shiny_App_Pearce/Pearce_Shiny_App')
runApp('C:/Users/djntr/R_Shiny_App_Pearce/Pearce_Shiny_App')
load("ToyData2.RData")
load("ToyData.RData")
library(ggrepel)
setwd(utils::getSrcDirectory)
## Packages and data loading
library(rankrate)
library(ggplot2)
library(reshape2)
library(toOrdinal)
library(plotly)
library(ggrepel)
setwd(utils::getSrcDirectory)
load("ToyData2.RData")
setwd(getSrcDirectory(function(){})[1])
setwd(getSrcDirectory(function(){})[1])
load("ToyData2.RData")
## Packages and data loading
library(rankrate)
library(ggplot2)
library(reshape2)
library(toOrdinal)
library(plotly)
library(ggrepel)
load("ToyData2.RData")
load("ToyData2.RData")
setwd(getSrcDirectory(function(){})[1])
load("ToyData2.RData")
load(path.expand("~/Downloads/Data.Rdata"))
load(path.expand("ToyData2.Rdata"))
ratings <- ToyData$ratings
rankings <- ToyData$rankings
ToyData <- load(path.expand("ToyData2.Rdata"))
ratings <- ToyData$ratings
rankings <- ToyData$rankings
load(path.expand("ToyData2.Rdata"))
ratings <- ToyData2$ratings
rankings <- ToyData2$rankings
M <- ToyData2$M
I <- nrow(ratings)
J <- ncol(ratings)
R <- ncol(rankings)
## 1. Updated Consistency Plotting
consistency <- data.frame(Judge=1:nrow(ratings),Kendall=NA)
for(i in 1:nrow(ratings)){
kendall <- 0
for(j1 in 1:(J-1)){for(j2 in (j1+1):J){
if(ratings[i,j1] < ratings[i,j2]){
if(which(rankings[i,]==j1)>which(rankings[i,]==j2)){kendall <- kendall + 1}
}else if(ratings[i,j1] > ratings[i,j2]){
if(which(rankings[i,]==j1) < which(rankings[i,]==j2)){kendall <- kendall + 1}
}
}}
consistency[i,2] <- kendall
}
p <- ggplot(consistency,aes(x=Kendall))+
theme_bw(base_size=15)+geom_histogram(binwidth = 0.5)+
scale_x_continuous(limits=c(-.6,max(consistency$Kendall)+.6),
breaks=function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))+
xlab("Number of Inconsistent Item Pairs")+ylab("Count")+
ggtitle("Inconsistency Between Ratings and Rankings")+
theme(panel.grid.major.x = element_blank(),panel.grid.minor.y = element_blank())
ggplotly(p)
## 2. Updated Results Plots
point_estimate <- fit_mb(Pi=rankings,X=ratings,M=M,method="Greedy")
ci <- ci_mb(Pi=rankings,X=ratings,M=M,nsamples=20,interval=0.95,all=TRUE,method="Greedy")
## Packages and data loading
library(rankrate)
library(ggplot2)
library(reshape2)
library(toOrdinal)
library(plotly)
library(ggrepel)
setwd(getSrcDirectory(function(){})[1])
## Packages and data loading
library(rankrate)
library(ggplot2)
library(reshape2)
library(toOrdinal)
library(plotly)
library(ggrepel)
load(path.expand("ToyData2.Rdata"))
ratings <- ToyData2$ratings
rankings <- ToyData2$rankings
M <- ToyData2$M
I <- nrow(ratings)
J <- ncol(ratings)
R <- ncol(rankings)
## 1. Updated Consistency Plotting
consistency <- data.frame(Judge=1:nrow(ratings),Kendall=NA)
for(i in 1:nrow(ratings)){
kendall <- 0
for(j1 in 1:(J-1)){for(j2 in (j1+1):J){
if(ratings[i,j1] < ratings[i,j2]){
if(which(rankings[i,]==j1)>which(rankings[i,]==j2)){kendall <- kendall + 1}
}else if(ratings[i,j1] > ratings[i,j2]){
if(which(rankings[i,]==j1) < which(rankings[i,]==j2)){kendall <- kendall + 1}
}
}}
consistency[i,2] <- kendall
}
p <- ggplot(consistency,aes(x=Kendall))+
theme_bw(base_size=15)+geom_histogram(binwidth = 0.5)+
scale_x_continuous(limits=c(-.6,max(consistency$Kendall)+.6),
breaks=function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))+
xlab("Number of Inconsistent Item Pairs")+ylab("Count")+
ggtitle("Inconsistency Between Ratings and Rankings")+
theme(panel.grid.major.x = element_blank(),panel.grid.minor.y = element_blank())
ggplotly(p)
## In the above, note the "binwidth" argument in geom_histogram and the replacement
## of "xlim" with "scale_x_continuous", which has a few additional arguments in it!
## 2. Updated Results Plots
point_estimate <- fit_mb(Pi=rankings,X=ratings,M=M,method="Greedy")
ci <- ci_mb(Pi=rankings,X=ratings,M=M,nsamples=20,interval=0.95,all=TRUE,method="Greedy")
results_p <- data.frame(Proposal=1:J,PointEstimate=point_estimate$p,
LowerLimit=unlist(ci$ci[1,1:J]),UpperLimit=unlist(ci$ci[2,1:J]))
ci$bootstrap_pi0
ggplot(results_p,aes(Proposal,y=PointEstimate,ymin=LowerLimit,ymax=UpperLimit))+
theme_bw(base_size=15)+geom_errorbar()+geom_point(size=3)+
scale_x_continuous(limits=c(.4,max(results_p$Proposal)+.6),
breaks=function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))+
ylim(c(0,1))+ylab("Integrated Score")+
ggtitle("Point Estimates and 95% CI of Quality","Approximate Estimation Algorithm")+
theme(panel.grid.major.x = element_blank(),panel.grid.minor.y = element_blank())
## Note the updated y-axis label, "Integrated Score"
# plot showing estimated rank and confidence interval by proposal
results_rank <- t(apply(ci$boostrap_ptheta[,1:J],1,rank))
results_rankCI <- data.frame(Proposal=1:J,RankEstimate = rank(point_estimate$pi0),
LowerLimit=apply(results_rank,2,function(ranks){quantile(ranks,0.025)}),
UpperLimit=apply(results_rank,2,function(ranks){quantile(ranks,0.975)}))
ggplot(results_rankCI,aes(Proposal,y=RankEstimate,ymin=LowerLimit,ymax=UpperLimit))+
theme_bw(base_size=15)+geom_errorbar()+geom_point(size=3)+
ylab("Estimated Rank")+
theme(panel.grid.major.x = element_blank(),panel.grid.minor.y = element_blank())
# plot comparing Mean Ratings method with Mallows-Binomial
results_comparison <- data.frame(Proposal=1:J,
MeanRatings=rank(apply(ratings,2,mean),ties.method="average"),
MallowsBinomial=rank(point_estimate$pi0))
ggplot(results_comparison,aes(MallowsBinomial,MeanRatings,label=Proposal))+
theme_bw(base_size=15)+geom_abline(slope=1,intercept=0,lty=2,color="gray")+
geom_point(size=3)+
geom_label_repel()+
labs(x="Mallows-Binomial Ranks",y="Ranks based on Mean Ratings",
title="Proposals by rank based on Mallows-Binomial or Mean Ratings")+
xlim(c(0.5,J+.5))+ylim(c(0.5,J+.5))+
theme(panel.grid.minor = element_blank())
runApp('C:/Users/djntr/R_Shiny_App_Pearce/Pearce_Shiny_App')
shiny::runApp('C:/Users/djntr/R_Shiny_App_Pearce/Pearce_Shiny_App')
runApp('C:/Users/djntr/R_Shiny_App_Pearce/Pearce_Shiny_App')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?read.csv
runApp()
runApp()
?Shinyalert
?shinyalert
?shinyalert()
runApp()
options("install.lock"=FALSE)
install.packages(shinyalert)
install.packages("shinyalert")
runApp()
?shinyalert
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
